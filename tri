#Ma version
def fusion(T1,T2):
    i1 = 0
    i2 = 0
    T = []
    print(T1)
    print(T2)
    while len(T1) > 0 and len(T2) > 0:
        if T1[i1] <= T2[i2]:
            T.append(T1[i1])
            T1.remove(T1[i1])
            print("t1 : ",T1)
            print("t : ",T)
        else:
            T.append(T2[i2])
            T2.remove(T2[i2])
            print("t2 : ",T2)
            print("t : ",T)
    print(T1)
    if len(T1) > 0:
        T = T + T1
    if len(T2) > 0:
        T = T + T2
    print(T)
                  
    return T

def tri_fusion(T):
    n = len(T)
    if n == 1:
        return T
    T1 = tri_fusion(T[0:n//2])
    T2 = tri_fusion(T[n//2:n])
    return fusion(T1,T2)

T1 = [1,3,6,7,9]
T2 = [2,4,8,15]
fusion(T1,T2)

#Version de Mathieu
def fusion_mathieu(T1,T2):
    i1 = 0
    i2 = 0
    T = []
    print(T1)
    print(T2)
    while len(T1) > i1 and len(T2) > i2:
        if T1[i1] <= T2[i2]:
            T.append(T1[i1])
            i1 = i1 + 1
        else:
            T.append(T2[i2])
            i2 = i2 + 1
    if len(T1) > i1:
        T += T1[i1:]
    if len(T2) > i2:
        T += T2[i2:]           
    return T

def tri_fusion(T):
    n = len(T)
    if n == 1:
        return T
    T1 = tri_fusion(T[0:n//2])
    T2 = tri_fusion(T[n//2:n])
    return fusion(T1,T2)

T1 = [1,3,6,7,9]
T2 = [2,4,8,15]
# fusion_mathieu(T1,T2)
